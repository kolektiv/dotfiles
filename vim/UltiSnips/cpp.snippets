snippet timerclass "Timer class and includes"
#include <sys/time.h>
#include <sys/types.h>


class Timer{
    static u_int64_t count;
    u_int64_t id_;
    struct timeval start_time_;
    string name_;

    public:
    Timer(const string &name, const std::function<int()> &fp) : id_(count), name_(name){
        ++count;
        cout << "start timer:" << id_ << " " << name_ << endl;
        gettimeofday(&start_time_, NULL);
        cout << "count: " << fp() << endl;
    }
    Timer(const string &name) : id_(count), name_(name){
        ++count;
        cout << "start timer:" << id_ << " " << name_ << endl;
        gettimeofday(&start_time_, NULL);
    }

    ~Timer() {
        struct timeval t;
        gettimeofday(&t, NULL);
        u_int64_t time = (u_int64_t) (t.tv_sec - start_time_.tv_sec) * 1000000
            + (t.tv_usec - start_time_.tv_usec);
        cout << "end timer:" << id_ << " " << name_ << " took:" << time << endl;
    }
};
u_int64_t Timer::count;
endsnippet

snippet hdr "Normal header crap"
#ifndef ${2:`!p snip.rv = (snip.fn if ("include/" not in path) else path.split("include/")[1]).upper().replace(".","_").replace("/","_")`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet

snippet chdr "CAMP header crap" b
#ifndef ${3:`!p snip.rv = (snip.fn if ("include/" not in path) else path.split("include/")[1]).upper().replace(".","_").replace("/","_")`}
#define $3

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016, Lawrence Livermore National Security, LLC.
//
// Produced at the Lawrence Livermore National Laboratory
//
// LLNL-CODE-689114
//
// All rights reserved.
//
// This file is part of RAJA.
//
// For additional details, please also read RAJA/LICENSE.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the disclaimer below.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the disclaimer (as noted below) in the
//   documentation and/or other materials provided with the distribution.
//
// * Neither the name of the LLNS/LLNL nor the names of its contributors may
//   be used to endorse or promote products derived from this software without
//   specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,
// LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

namespace camp
{

/// \cond
namespace detail
{
  template<${2:typename ...Ts}>
  struct _$1{
  };
}
/// \endcond

// TODO: document
template<$2>
struct ${1:`!p snip.rv = snip.basename.strip()`};

template<$2>
struct $1{
};

} // end namespace camp

#endif /* $3 */
endsnippet
